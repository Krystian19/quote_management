type Quote {
  id: UUID!
  accountId: UUID!
  paymentId: UUID
  Items: [QuoteItem!]!
  Taxes: [QuoteTax!]!
  Conflicts: [QuoteConflict!]!
  Total: Float!
  createdAt: String!
  updatedAt: String!
}

type QuoteItem {
  id: UUID!
  itemId: UUID!
  Item: InventoryItem!
  itemPriceId: UUID!
  ItemPrice: InventoryItemPrice!
  quantity: Int!
}

type QuoteTax {
  id: UUID!
  taxId: UUID!
  Tax: Tax!
}

extend type Query {
  getQuote(id: UUID!): Quote
  getQuotes: [Quote!]!
}

extend type Mutation {
  createQuote(fields: CreateQuoteInput!): Quote!
  # confirmQuote(id: UUID!, paymentId: UUID!): [QuoteConflict!]!
}

input CreateQuoteInput {
  accountId: UUID!
  items: [CreateQuoteItemsInput!]!
}

input CreateQuoteItemsInput {
  itemId: UUID!
  quantity: Int!
}

enum QuoteConflictType {
  PRICE_CHANGED
  ITEM_NOT_IN_STOCK
}

type QuoteConflict {
  itemId: UUID!
  reason: QuoteConflictType!
}
