// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package external_bff_test

import (
	"context"

	"github.com/Khan/genqlient/graphql"
	"github.com/google/uuid"
)

// CreateInventoryItemCreateInventoryItem includes the requested fields of the GraphQL type InventoryItem.
type CreateInventoryItemCreateInventoryItem struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns CreateInventoryItemCreateInventoryItem.Id, and is useful for accessing the field via an interface.
func (v *CreateInventoryItemCreateInventoryItem) GetId() uuid.UUID { return v.Id }

type CreateInventoryItemInput struct {
	Name              string  `json:"name"`
	IntroductionPrice float64 `json:"introductionPrice"`
}

// GetName returns CreateInventoryItemInput.Name, and is useful for accessing the field via an interface.
func (v *CreateInventoryItemInput) GetName() string { return v.Name }

// GetIntroductionPrice returns CreateInventoryItemInput.IntroductionPrice, and is useful for accessing the field via an interface.
func (v *CreateInventoryItemInput) GetIntroductionPrice() float64 { return v.IntroductionPrice }

// CreateInventoryItemResponse is returned by CreateInventoryItem on success.
type CreateInventoryItemResponse struct {
	CreateInventoryItem CreateInventoryItemCreateInventoryItem `json:"createInventoryItem"`
}

// GetCreateInventoryItem returns CreateInventoryItemResponse.CreateInventoryItem, and is useful for accessing the field via an interface.
func (v *CreateInventoryItemResponse) GetCreateInventoryItem() CreateInventoryItemCreateInventoryItem {
	return v.CreateInventoryItem
}

// CreateInventoryItemsResponse is returned by CreateInventoryItems on success.
type CreateInventoryItemsResponse struct {
	CreateInventoryItems bool `json:"createInventoryItems"`
}

// GetCreateInventoryItems returns CreateInventoryItemsResponse.CreateInventoryItems, and is useful for accessing the field via an interface.
func (v *CreateInventoryItemsResponse) GetCreateInventoryItems() bool { return v.CreateInventoryItems }

// CreateTaxCreateTax includes the requested fields of the GraphQL type Tax.
type CreateTaxCreateTax struct {
	Id          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	TaxRate     float64   `json:"taxRate"`
	EffectiveAt string    `json:"effectiveAt"`
	CreatedAt   string    `json:"createdAt"`
	UpdatedAt   string    `json:"updatedAt"`
}

// GetId returns CreateTaxCreateTax.Id, and is useful for accessing the field via an interface.
func (v *CreateTaxCreateTax) GetId() uuid.UUID { return v.Id }

// GetName returns CreateTaxCreateTax.Name, and is useful for accessing the field via an interface.
func (v *CreateTaxCreateTax) GetName() string { return v.Name }

// GetTaxRate returns CreateTaxCreateTax.TaxRate, and is useful for accessing the field via an interface.
func (v *CreateTaxCreateTax) GetTaxRate() float64 { return v.TaxRate }

// GetEffectiveAt returns CreateTaxCreateTax.EffectiveAt, and is useful for accessing the field via an interface.
func (v *CreateTaxCreateTax) GetEffectiveAt() string { return v.EffectiveAt }

// GetCreatedAt returns CreateTaxCreateTax.CreatedAt, and is useful for accessing the field via an interface.
func (v *CreateTaxCreateTax) GetCreatedAt() string { return v.CreatedAt }

// GetUpdatedAt returns CreateTaxCreateTax.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CreateTaxCreateTax) GetUpdatedAt() string { return v.UpdatedAt }

type CreateTaxInput struct {
	Name    string  `json:"name"`
	TaxRate float64 `json:"taxRate"`
}

// GetName returns CreateTaxInput.Name, and is useful for accessing the field via an interface.
func (v *CreateTaxInput) GetName() string { return v.Name }

// GetTaxRate returns CreateTaxInput.TaxRate, and is useful for accessing the field via an interface.
func (v *CreateTaxInput) GetTaxRate() float64 { return v.TaxRate }

// CreateTaxResponse is returned by CreateTax on success.
type CreateTaxResponse struct {
	CreateTax CreateTaxCreateTax `json:"createTax"`
}

// GetCreateTax returns CreateTaxResponse.CreateTax, and is useful for accessing the field via an interface.
func (v *CreateTaxResponse) GetCreateTax() CreateTaxCreateTax { return v.CreateTax }

// GetAllInventoryItemsGetAllInventoryItemsInventoryItem includes the requested fields of the GraphQL type InventoryItem.
type GetAllInventoryItemsGetAllInventoryItemsInventoryItem struct {
	Id   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetId returns GetAllInventoryItemsGetAllInventoryItemsInventoryItem.Id, and is useful for accessing the field via an interface.
func (v *GetAllInventoryItemsGetAllInventoryItemsInventoryItem) GetId() uuid.UUID { return v.Id }

// GetName returns GetAllInventoryItemsGetAllInventoryItemsInventoryItem.Name, and is useful for accessing the field via an interface.
func (v *GetAllInventoryItemsGetAllInventoryItemsInventoryItem) GetName() string { return v.Name }

// GetAllInventoryItemsResponse is returned by GetAllInventoryItems on success.
type GetAllInventoryItemsResponse struct {
	GetAllInventoryItems []GetAllInventoryItemsGetAllInventoryItemsInventoryItem `json:"getAllInventoryItems"`
}

// GetGetAllInventoryItems returns GetAllInventoryItemsResponse.GetAllInventoryItems, and is useful for accessing the field via an interface.
func (v *GetAllInventoryItemsResponse) GetGetAllInventoryItems() []GetAllInventoryItemsGetAllInventoryItemsInventoryItem {
	return v.GetAllInventoryItems
}

// GetInventoryItemGetInventoryItem includes the requested fields of the GraphQL type InventoryItem.
type GetInventoryItemGetInventoryItem struct {
	Id           uuid.UUID                                                      `json:"id"`
	Name         string                                                         `json:"name"`
	CurrentPrice GetInventoryItemGetInventoryItemCurrentPriceInventoryItemPrice `json:"currentPrice"`
}

// GetId returns GetInventoryItemGetInventoryItem.Id, and is useful for accessing the field via an interface.
func (v *GetInventoryItemGetInventoryItem) GetId() uuid.UUID { return v.Id }

// GetName returns GetInventoryItemGetInventoryItem.Name, and is useful for accessing the field via an interface.
func (v *GetInventoryItemGetInventoryItem) GetName() string { return v.Name }

// GetCurrentPrice returns GetInventoryItemGetInventoryItem.CurrentPrice, and is useful for accessing the field via an interface.
func (v *GetInventoryItemGetInventoryItem) GetCurrentPrice() GetInventoryItemGetInventoryItemCurrentPriceInventoryItemPrice {
	return v.CurrentPrice
}

// GetInventoryItemGetInventoryItemCurrentPriceInventoryItemPrice includes the requested fields of the GraphQL type InventoryItemPrice.
type GetInventoryItemGetInventoryItemCurrentPriceInventoryItemPrice struct {
	Id              uuid.UUID `json:"id"`
	InventoryItemId uuid.UUID `json:"inventoryItemId"`
	Price           float64   `json:"price"`
	Version         int       `json:"version"`
}

// GetId returns GetInventoryItemGetInventoryItemCurrentPriceInventoryItemPrice.Id, and is useful for accessing the field via an interface.
func (v *GetInventoryItemGetInventoryItemCurrentPriceInventoryItemPrice) GetId() uuid.UUID {
	return v.Id
}

// GetInventoryItemId returns GetInventoryItemGetInventoryItemCurrentPriceInventoryItemPrice.InventoryItemId, and is useful for accessing the field via an interface.
func (v *GetInventoryItemGetInventoryItemCurrentPriceInventoryItemPrice) GetInventoryItemId() uuid.UUID {
	return v.InventoryItemId
}

// GetPrice returns GetInventoryItemGetInventoryItemCurrentPriceInventoryItemPrice.Price, and is useful for accessing the field via an interface.
func (v *GetInventoryItemGetInventoryItemCurrentPriceInventoryItemPrice) GetPrice() float64 {
	return v.Price
}

// GetVersion returns GetInventoryItemGetInventoryItemCurrentPriceInventoryItemPrice.Version, and is useful for accessing the field via an interface.
func (v *GetInventoryItemGetInventoryItemCurrentPriceInventoryItemPrice) GetVersion() int {
	return v.Version
}

// GetInventoryItemResponse is returned by GetInventoryItem on success.
type GetInventoryItemResponse struct {
	GetInventoryItem GetInventoryItemGetInventoryItem `json:"getInventoryItem"`
}

// GetGetInventoryItem returns GetInventoryItemResponse.GetInventoryItem, and is useful for accessing the field via an interface.
func (v *GetInventoryItemResponse) GetGetInventoryItem() GetInventoryItemGetInventoryItem {
	return v.GetInventoryItem
}

// UpdateInventoryItemPriceResponse is returned by UpdateInventoryItemPrice on success.
type UpdateInventoryItemPriceResponse struct {
	UpdateInventoryItemPrice UpdateInventoryItemPriceUpdateInventoryItemPriceInventoryItem `json:"updateInventoryItemPrice"`
}

// GetUpdateInventoryItemPrice returns UpdateInventoryItemPriceResponse.UpdateInventoryItemPrice, and is useful for accessing the field via an interface.
func (v *UpdateInventoryItemPriceResponse) GetUpdateInventoryItemPrice() UpdateInventoryItemPriceUpdateInventoryItemPriceInventoryItem {
	return v.UpdateInventoryItemPrice
}

// UpdateInventoryItemPriceUpdateInventoryItemPriceInventoryItem includes the requested fields of the GraphQL type InventoryItem.
type UpdateInventoryItemPriceUpdateInventoryItemPriceInventoryItem struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns UpdateInventoryItemPriceUpdateInventoryItemPriceInventoryItem.Id, and is useful for accessing the field via an interface.
func (v *UpdateInventoryItemPriceUpdateInventoryItemPriceInventoryItem) GetId() uuid.UUID {
	return v.Id
}

// __CreateInventoryItemInput is used internally by genqlient
type __CreateInventoryItemInput struct {
	Input CreateInventoryItemInput `json:"input"`
}

// GetInput returns __CreateInventoryItemInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateInventoryItemInput) GetInput() CreateInventoryItemInput { return v.Input }

// __CreateInventoryItemsInput is used internally by genqlient
type __CreateInventoryItemsInput struct {
	Input []CreateInventoryItemInput `json:"input"`
}

// GetInput returns __CreateInventoryItemsInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateInventoryItemsInput) GetInput() []CreateInventoryItemInput { return v.Input }

// __CreateTaxInput is used internally by genqlient
type __CreateTaxInput struct {
	Input CreateTaxInput `json:"input"`
}

// GetInput returns __CreateTaxInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateTaxInput) GetInput() CreateTaxInput { return v.Input }

// __GetInventoryItemInput is used internally by genqlient
type __GetInventoryItemInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __GetInventoryItemInput.Id, and is useful for accessing the field via an interface.
func (v *__GetInventoryItemInput) GetId() uuid.UUID { return v.Id }

// __UpdateInventoryItemPriceInput is used internally by genqlient
type __UpdateInventoryItemPriceInput struct {
	Id    uuid.UUID `json:"id"`
	Price float64   `json:"price"`
}

// GetId returns __UpdateInventoryItemPriceInput.Id, and is useful for accessing the field via an interface.
func (v *__UpdateInventoryItemPriceInput) GetId() uuid.UUID { return v.Id }

// GetPrice returns __UpdateInventoryItemPriceInput.Price, and is useful for accessing the field via an interface.
func (v *__UpdateInventoryItemPriceInput) GetPrice() float64 { return v.Price }

// getAllTaxesGetAllTaxesTax includes the requested fields of the GraphQL type Tax.
type getAllTaxesGetAllTaxesTax struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns getAllTaxesGetAllTaxesTax.Id, and is useful for accessing the field via an interface.
func (v *getAllTaxesGetAllTaxesTax) GetId() uuid.UUID { return v.Id }

// getAllTaxesResponse is returned by getAllTaxes on success.
type getAllTaxesResponse struct {
	GetAllTaxes []getAllTaxesGetAllTaxesTax `json:"getAllTaxes"`
}

// GetGetAllTaxes returns getAllTaxesResponse.GetAllTaxes, and is useful for accessing the field via an interface.
func (v *getAllTaxesResponse) GetGetAllTaxes() []getAllTaxesGetAllTaxesTax { return v.GetAllTaxes }

// The query or mutation executed by CreateInventoryItem.
const CreateInventoryItem_Operation = `
mutation CreateInventoryItem ($input: CreateInventoryItemInput!) {
	createInventoryItem(fields: $input) {
		id
	}
}
`

func CreateInventoryItem(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateInventoryItemInput,
) (*CreateInventoryItemResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateInventoryItem",
		Query:  CreateInventoryItem_Operation,
		Variables: &__CreateInventoryItemInput{
			Input: input,
		},
	}
	var err_ error

	var data_ CreateInventoryItemResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateInventoryItems.
const CreateInventoryItems_Operation = `
mutation CreateInventoryItems ($input: [CreateInventoryItemInput!]!) {
	createInventoryItems(fields: $input)
}
`

func CreateInventoryItems(
	ctx_ context.Context,
	client_ graphql.Client,
	input []CreateInventoryItemInput,
) (*CreateInventoryItemsResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateInventoryItems",
		Query:  CreateInventoryItems_Operation,
		Variables: &__CreateInventoryItemsInput{
			Input: input,
		},
	}
	var err_ error

	var data_ CreateInventoryItemsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateTax.
const CreateTax_Operation = `
mutation CreateTax ($input: CreateTaxInput!) {
	createTax(fields: $input) {
		id
		name
		taxRate
		effectiveAt
		createdAt
		updatedAt
	}
}
`

func CreateTax(
	ctx_ context.Context,
	client_ graphql.Client,
	input CreateTaxInput,
) (*CreateTaxResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateTax",
		Query:  CreateTax_Operation,
		Variables: &__CreateTaxInput{
			Input: input,
		},
	}
	var err_ error

	var data_ CreateTaxResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetAllInventoryItems.
const GetAllInventoryItems_Operation = `
query GetAllInventoryItems {
	getAllInventoryItems {
		id
		name
	}
}
`

func GetAllInventoryItems(
	ctx_ context.Context,
	client_ graphql.Client,
) (*GetAllInventoryItemsResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetAllInventoryItems",
		Query:  GetAllInventoryItems_Operation,
	}
	var err_ error

	var data_ GetAllInventoryItemsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetInventoryItem.
const GetInventoryItem_Operation = `
query GetInventoryItem ($id: UUID!) {
	getInventoryItem(id: $id) {
		id
		name
		currentPrice {
			id
			inventoryItemId
			price
			version
		}
	}
}
`

func GetInventoryItem(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
) (*GetInventoryItemResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetInventoryItem",
		Query:  GetInventoryItem_Operation,
		Variables: &__GetInventoryItemInput{
			Id: id,
		},
	}
	var err_ error

	var data_ GetInventoryItemResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateInventoryItemPrice.
const UpdateInventoryItemPrice_Operation = `
mutation UpdateInventoryItemPrice ($id: UUID!, $price: Float!) {
	updateInventoryItemPrice(id: $id, price: $price) {
		id
	}
}
`

func UpdateInventoryItemPrice(
	ctx_ context.Context,
	client_ graphql.Client,
	id uuid.UUID,
	price float64,
) (*UpdateInventoryItemPriceResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateInventoryItemPrice",
		Query:  UpdateInventoryItemPrice_Operation,
		Variables: &__UpdateInventoryItemPriceInput{
			Id:    id,
			Price: price,
		},
	}
	var err_ error

	var data_ UpdateInventoryItemPriceResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getAllTaxes.
const getAllTaxes_Operation = `
query getAllTaxes {
	getAllTaxes {
		id
	}
}
`

func getAllTaxes(
	ctx_ context.Context,
	client_ graphql.Client,
) (*getAllTaxesResponse, error) {
	req_ := &graphql.Request{
		OpName: "getAllTaxes",
		Query:  getAllTaxes_Operation,
	}
	var err_ error

	var data_ getAllTaxesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
