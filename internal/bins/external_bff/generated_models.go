// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package external_bff

import (
	"fmt"
	"io"
	"strconv"

	"github.com/google/uuid"
)

type CreateInventoryItemInput struct {
	Name              string  `json:"name"`
	IntroductionPrice float64 `json:"introductionPrice"`
}

type CreateQuoteInput struct {
	AccountID uuid.UUID                `json:"accountId"`
	Items     []*CreateQuoteItemsInput `json:"items"`
}

type CreateQuoteItemsInput struct {
	ItemID   uuid.UUID `json:"itemId"`
	Quantity int       `json:"quantity"`
}

type CreateTaxInput struct {
	Name    string  `json:"name"`
	TaxRate float64 `json:"taxRate"`
}

type Mutation struct {
}

type Query struct {
}

type QuoteConflict struct {
	ItemID uuid.UUID         `json:"itemId"`
	Reason QuoteConflictType `json:"reason"`
}

type QuoteConflictType string

const (
	QuoteConflictTypePriceChanged   QuoteConflictType = "PRICE_CHANGED"
	QuoteConflictTypeItemNotInStock QuoteConflictType = "ITEM_NOT_IN_STOCK"
)

var AllQuoteConflictType = []QuoteConflictType{
	QuoteConflictTypePriceChanged,
	QuoteConflictTypeItemNotInStock,
}

func (e QuoteConflictType) IsValid() bool {
	switch e {
	case QuoteConflictTypePriceChanged, QuoteConflictTypeItemNotInStock:
		return true
	}
	return false
}

func (e QuoteConflictType) String() string {
	return string(e)
}

func (e *QuoteConflictType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = QuoteConflictType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid QuoteConflictType", str)
	}
	return nil
}

func (e QuoteConflictType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
