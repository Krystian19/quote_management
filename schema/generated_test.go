// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package external_bff_test

import (
	"context"

	"github.com/Khan/genqlient/graphql"
	"github.com/google/uuid"
)

// getAllTaxesGetAllTaxesTax includes the requested fields of the GraphQL type Tax.
type getAllTaxesGetAllTaxesTax struct {
	Id          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	TaxRate     float64   `json:"taxRate"`
	EffectiveAt string    `json:"effectiveAt"`
	CreatedAt   string    `json:"createdAt"`
	UpdatedAt   string    `json:"updatedAt"`
}

// GetId returns getAllTaxesGetAllTaxesTax.Id, and is useful for accessing the field via an interface.
func (v *getAllTaxesGetAllTaxesTax) GetId() uuid.UUID { return v.Id }

// GetName returns getAllTaxesGetAllTaxesTax.Name, and is useful for accessing the field via an interface.
func (v *getAllTaxesGetAllTaxesTax) GetName() string { return v.Name }

// GetTaxRate returns getAllTaxesGetAllTaxesTax.TaxRate, and is useful for accessing the field via an interface.
func (v *getAllTaxesGetAllTaxesTax) GetTaxRate() float64 { return v.TaxRate }

// GetEffectiveAt returns getAllTaxesGetAllTaxesTax.EffectiveAt, and is useful for accessing the field via an interface.
func (v *getAllTaxesGetAllTaxesTax) GetEffectiveAt() string { return v.EffectiveAt }

// GetCreatedAt returns getAllTaxesGetAllTaxesTax.CreatedAt, and is useful for accessing the field via an interface.
func (v *getAllTaxesGetAllTaxesTax) GetCreatedAt() string { return v.CreatedAt }

// GetUpdatedAt returns getAllTaxesGetAllTaxesTax.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getAllTaxesGetAllTaxesTax) GetUpdatedAt() string { return v.UpdatedAt }

// getAllTaxesResponse is returned by getAllTaxes on success.
type getAllTaxesResponse struct {
	GetAllTaxes []getAllTaxesGetAllTaxesTax `json:"getAllTaxes"`
}

// GetGetAllTaxes returns getAllTaxesResponse.GetAllTaxes, and is useful for accessing the field via an interface.
func (v *getAllTaxesResponse) GetGetAllTaxes() []getAllTaxesGetAllTaxesTax { return v.GetAllTaxes }

// The query or mutation executed by getAllTaxes.
const getAllTaxes_Operation = `
query getAllTaxes {
	getAllTaxes {
		id
		name
		taxRate
		effectiveAt
		createdAt
		updatedAt
	}
}
`

func getAllTaxes(
	ctx_ context.Context,
	client_ graphql.Client,
) (*getAllTaxesResponse, error) {
	req_ := &graphql.Request{
		OpName: "getAllTaxes",
		Query:  getAllTaxes_Operation,
	}
	var err_ error

	var data_ getAllTaxesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
